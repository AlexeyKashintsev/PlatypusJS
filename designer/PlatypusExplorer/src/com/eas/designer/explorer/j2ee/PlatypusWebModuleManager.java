/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.eas.designer.explorer.j2ee;

import com.eas.designer.application.PlatypusUtils;
import com.eas.designer.explorer.platform.EmptyPlatformHomePathException;
import com.eas.designer.explorer.platform.PlatypusPlatform;
import com.eas.designer.explorer.project.PlatypusProject;
import com.eas.util.FileUtils;
import com.eas.xml.dom.XmlDom2String;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipException;
import javax.xml.parsers.ParserConfigurationException;
import org.netbeans.modules.j2ee.dd.api.common.NameAlreadyUsedException;
import org.netbeans.modules.j2ee.dd.api.web.DDProvider;
import org.netbeans.modules.j2ee.dd.api.web.Servlet;
import org.netbeans.modules.j2ee.dd.api.web.ServletMapping;
import org.netbeans.modules.j2ee.dd.api.web.WebApp;
import org.netbeans.modules.j2ee.deployment.devmodules.api.Deployment;
import org.netbeans.modules.j2ee.deployment.devmodules.api.Deployment.DeploymentException;
import org.netbeans.modules.j2ee.deployment.devmodules.spi.J2eeModuleProvider;
import org.openide.ErrorManager;
import org.openide.filesystems.FileLock;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;

/**
 * A tool to prepare and deploy the Platypus web module.
 *
 * @author vv
 */
public class PlatypusWebModuleManager {

    public static final String PLATYPUS_SERVLET_URL_PATTERN = "/application/*"; //NOI18N
    protected static final String WAR_FILE_NAME = "PlatypusServlet.war"; //NOI18N
    protected static final String WEB_DESCRIPTOR_FILE_NAME = "web.xml"; //NOI18N
    protected static final String START_PAGE_FILE_NAME = "applicationStart.html"; //NOI18N
    protected static final String LOGIN_PAGE_FILE_NAME = "login.html"; //NOI18N
    protected static final String LOGIN_FAIL_PAGE_FILE_NAME = "loginFail.html"; //NOI18N
    protected static final String JS_DIRECTORY_NAME = "js"; //NOI18N
    protected static final String START_JS_FILE_NAME = "start.js"; //NOI18N
    protected static final String WEB_XML_FILE_NAME = "web.xml"; //NOI18N
    protected static final String WEB_XML_TEMPLATE_NAME = "web-3.0.xml"; //NOI18N
    protected static final String SERVLET_BEAN_NAME = "Servlet"; //NOI18N
    protected static final String MULTIPART_CONFIG_BEAN_NAME = "MultipartConfig"; //NOI18N
    protected static final String SERVLET_MAPPING_BEAN_NAME = "ServletMapping"; //NOI18N
    protected static final String PLATYPUS_SERVLET_NAME = "PlatypusServlet"; //NOI18N
    protected static final String PLATYPUS_SERVLET_CLASS = "com.eas.server.httpservlet.PlatypusHttpServlet";//NOI18N
    protected final String START_JS_FILE_TEMPLATE = "" //NOI18N
            + "/*\n"//NOI18N
            + "* Do not edit this file manualy, it will be overwritted by Platypus Application Designer.\n"//NOI18N
            + "*/\n"//NOI18N
            + "\n"//NOI18N
            + "require(['%s'], function(){\n"//NOI18N
            + "\tvar f = new %s()\n"//NOI18N
            + "\tf.show()\n"//NOI18N
            + "})";//NOI18N
    protected final PlatypusProject project;
    protected final FileObject projectDir;
    protected FileObject webAppDir;
    protected FileObject webInfDir;
    protected FileObject metaInfDir;

    public PlatypusWebModuleManager(PlatypusProject aProject) {
        project = aProject;
        projectDir = aProject.getProjectDirectory();
    }

    /**
     * Runs the web application.
     *
     * @param isDebug true if debug mode to be activated
     * @return URL to open in browser
     *
     */
    public String run(String appElementId, boolean isDebug) {
        PlatypusWebModule webModule = project.getLookup().lookup(PlatypusWebModule.class);
        String webAppRunUrl = null;
        if (webModule != null) {
            if (webModule.getServerID() == null || webModule.getServerID().isEmpty()) {
                project.getOutputWindowIO().getOut().println("Application server is not set. Check J2EE Server settings at Project's properties.");
                return null;
            }
            if (webModule.getUrl() == null || webModule.getUrl().isEmpty()) {
                project.getOutputWindowIO().getOut().println("J2EE Server context is not configured for the project.");
                return null;
            }
            try {
                prepareWebApplication();
                configureWebApplication(webModule);
                setStartApplicationElement(appElementId);
                webAppRunUrl = Deployment.getDefault().deploy(webModule, Deployment.Mode.RUN, null, START_PAGE_FILE_NAME, false);
                String deployResultMessage = "Web application deployed.";
                Logger.getLogger(PlatypusWebModuleManager.class.getName()).log(Level.INFO, deployResultMessage);
                project.getOutputWindowIO().getOut().println(deployResultMessage);

            } catch (IOException | EmptyPlatformHomePathException | DeploymentException | ParserConfigurationException ex) {
                ErrorManager.getDefault().notify(ex);
            }
        } else {
            throw new IllegalStateException("J2eeModuleProvider instance should be in the project's lookup.");
        }
        return webAppRunUrl;
    }

    /**
     * Creates an web application skeleton if not created yet.
     */
    protected void prepareWebApplication() throws IOException, EmptyPlatformHomePathException {
        webAppDir = createFolderIfNotExists(projectDir, PlatypusWebModule.WEB_DIRECTORY);
        FileObject platformBinDir = FileUtil.toFileObject(PlatypusPlatform.getPlatformBinDirectory());
        FileObject referenceWar = platformBinDir.getFileObject(WAR_FILE_NAME);
        if (referenceWar != null) {
            FileObject war = FileUtil.getArchiveRoot(referenceWar);
            if (war != null) {
                copyContent(war, webAppDir);
            } else {
                throw new ZipException("Error reading web application archive.");
            }
        } else {
            throw new FileNotFoundException("Web application archive is not found at: " + referenceWar.getPath());
        }
        webInfDir = createFolderIfNotExists(webAppDir, PlatypusWebModule.WEB_INF_DIRECTORY);
        metaInfDir = createFolderIfNotExists(webAppDir, PlatypusWebModule.META_INF_DIRECTORY);
        createFolderIfNotExists(webAppDir, PlatypusWebModule.PUBLIC_DIRECTORY);
    }

    /**
     * Recursively copies web application structure from war archive. If
     * destination file exists it isn't overwritten.
     *
     * @throws IOException if some I/O problem occurred.
     */
    protected void copyContent(FileObject sourceDir, FileObject targetDir) throws IOException {
        assert sourceDir.isFolder() && targetDir.isFolder();
        FileObject targetFile;
        for (FileObject childFile : sourceDir.getChildren()) {
            if (childFile.isFolder()) {
                targetFile = targetDir.getFileObject(childFile.getName(), childFile.getExt());
                if (targetFile == null) {
                    targetFile = targetDir.createFolder(childFile.getNameExt());
                }
                assert targetFile.isFolder();
                copyContent(childFile, targetFile);
            } else {
                copyIfNotExists(targetDir, childFile);
            }
        }
    }

    private FileObject copyIfNotExists(FileObject dir, FileObject file) throws IOException {
        FileObject target = dir.getFileObject(file.getNameExt());
        if (target == null) {
            target = file.copy(dir, file.getName(), file.getExt());
        }
        return target;
    }

    private FileObject createFolderIfNotExists(FileObject dir, String name) throws IOException {
        FileObject fo = dir.getFileObject(name);
        if (fo == null) {
            fo = dir.createFolder(name);
        }
        return fo;
    }

    /**
     * Configures an web application.
     *
     * @param aJmp Web Module
     */
    protected void configureWebApplication(J2eeModuleProvider aJmp) throws IOException, ParserConfigurationException {
        WebAppConfigurator webAppConfigurator = WebAppConfiguratorFactory.getInstance().createWebConfigurator(project, aJmp.getServerID());
        if (webAppConfigurator != null) {
            webAppConfigurator.configure();
        } else {
            String errorMessage = String.format("Web application configuration is not supported for application server: %s", aJmp.getServerID());
            Logger.getLogger(PlatypusWebModuleManager.class.getName()).log(Level.WARNING, errorMessage);
            project.getOutputWindowIO().getErr().println(errorMessage);
        }
        configureDeploymentDescriptor();
    }
    
    private void configureDeploymentDescriptor() throws IOException, ParserConfigurationException {
        FileObject webXml = webInfDir.getFileObject(WEB_XML_FILE_NAME);
        if (webXml == null) {
            webXml = webInfDir.createData(WEB_XML_FILE_NAME);
        } 
        
        WebApplication wa = new WebApplication();
        wa.addInitParam(new WebApplication.ContextParam("url", PlatypusWebModule.MAIN_DATASOURCE_NAME));
        FileUtils.writeString(FileUtil.toFile(webXml), XmlDom2String.transform(wa.toDocument()), PlatypusUtils.COMMON_ENCODING_NAME);
//        WebApp webApp = DDProvider.getDefault().getDDRoot(webXml);
//        webApp.setDisplayName(project.getDisplayName());  
//        configurePlatypusServlet(webApp);
//        
//        webApp.write(webXml);
    }
    
    private void configurePlatypusServlet(WebApp webApp) {
        try {
            Servlet platypusServlet = findPlatypusServlet(webApp);
            if (platypusServlet == null) {
                try {
                    platypusServlet = (Servlet) webApp.addBean(SERVLET_BEAN_NAME);     
                } catch (ClassNotFoundException ex) {
                    ErrorManager.getDefault().notify(ex); 
                } 
            }
            platypusServlet.setServletName(PLATYPUS_SERVLET_NAME);
            platypusServlet.setServletClass(PLATYPUS_SERVLET_CLASS);
            ServletMapping platypusServletMapping = findPlatypusServletMapping(webApp);
            if (platypusServletMapping == null) {
                platypusServletMapping = (ServletMapping) webApp.addBean(SERVLET_MAPPING_BEAN_NAME);
            }
            platypusServletMapping.setServletName(PLATYPUS_SERVLET_NAME);
            platypusServletMapping.setUrlPattern(PLATYPUS_SERVLET_URL_PATTERN);
            
        } catch (ClassNotFoundException ex) {
            ErrorManager.getDefault().notify(ex);
        }
    }
    
    private Servlet findPlatypusServlet(WebApp webApp) {
        for (Servlet servlet : webApp.getServlet()) {
            if (PLATYPUS_SERVLET_NAME.equals(servlet.getServletName())) {
                return servlet;
            }
        }
        return null;
    }
    
    private ServletMapping findPlatypusServletMapping(WebApp webApp) {
        for (ServletMapping servletMapping : webApp.getServletMapping()) {
            if (PLATYPUS_SERVLET_NAME.equals(servletMapping.getServletName())) {
                return servletMapping;
            }
        }
        return null;
    }
    
    
    private FileObject createWebXml(FileObject dir) throws IOException {
        MakeFileCopy action = new MakeFileCopy(WEB_XML_TEMPLATE_NAME, dir, WEB_XML_FILE_NAME);
        FileUtil.runAtomicAction(action);
        if (action.getException() != null) {
            throw action.getException();
        } else {
            return action.getResult();
        }
    }

    protected void setStartApplicationElement(String appElementId) throws IOException {
        if (appElementId != null && !appElementId.isEmpty()) {
            FileObject jsDir = webAppDir.getFileObject(JS_DIRECTORY_NAME);
            FileObject startJs = jsDir.getFileObject(START_JS_FILE_NAME);
            if (startJs != null) {
                String starupScript = String.format(START_JS_FILE_TEMPLATE, appElementId, appElementId);
                FileUtils.writeString(FileUtil.toFile(startJs), starupScript, PlatypusUtils.COMMON_ENCODING_NAME);
            } else {
                throw new FileNotFoundException(START_JS_FILE_NAME + " file is not found in " + JS_DIRECTORY_NAME);
            }
        } else {
            throw new IllegalStateException("appElementId is null or empty.");
        }
    }

    private static class MakeFileCopy implements Runnable {

        private String fromFile;
        private FileObject toDir;
        private String toFile;
        private IOException exception;
        private FileObject result;

        MakeFileCopy(String fromFile, FileObject toDir, String toFile) {
            this.fromFile = fromFile;
            this.toDir = toDir;
            this.toFile = toFile;
        }

        IOException getException() {
            return exception;
        }

        FileObject getResult() {
            return result;
        }

        @Override
        public void run() {
            try {
                // PENDING : should be easier to define in layer and copy related FileObject (doesn't require systemClassLoader)
                if (toDir.getFileObject(toFile) != null) {
                    throw new IllegalStateException("file " + toFile + " already exists in " + toDir);
                }
                FileObject xml = FileUtil.createData(toDir, toFile);
                String content = readResource(PlatypusWebModuleManager.class.getResourceAsStream(fromFile));
                if (content != null) {
                    FileLock lock = xml.lock();
                    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(xml.getOutputStream(lock)))) {
                        bw.write(content);
                    } finally {
                        lock.releaseLock();
                    }
                }
                result = xml;
            } catch (IOException e) {
                exception = e;
            }
        }

        private String readResource(InputStream is) throws IOException {
            StringBuilder sb = new StringBuilder();
            String lineSep = System.getProperty("line.separator"); // NOI18N
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            try {
                String line = br.readLine();
                while (line != null) {
                    sb.append(line);
                    sb.append(lineSep);
                    line = br.readLine();
                }
            } finally {
                br.close();
            }
            return sb.toString();
        }
    }
}
