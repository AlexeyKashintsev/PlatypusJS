/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.eas.designer.explorer.j2ee;

import com.eas.client.ClientConstants;
import com.eas.client.resourcepool.GeneralResourceProvider;
import com.eas.client.settings.DbConnectionSettings;
import com.eas.designer.application.PlatypusUtils;
import com.eas.designer.explorer.j2ee.dd.AppListener;
import com.eas.designer.explorer.j2ee.dd.ContextParam;
import com.eas.designer.explorer.j2ee.dd.MultipartConfig;
import com.eas.designer.explorer.j2ee.dd.ResourceRef;
import com.eas.designer.explorer.j2ee.dd.Servlet;
import com.eas.designer.explorer.j2ee.dd.ServletMapping;
import com.eas.designer.explorer.j2ee.dd.WebApplication;
import com.eas.designer.explorer.platform.EmptyPlatformHomePathException;
import com.eas.designer.explorer.platform.PlatypusPlatform;
import com.eas.designer.explorer.project.PlatypusProject;
import com.eas.util.FileUtils;
import com.eas.xml.dom.XmlDom2String;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipException;
import org.netbeans.modules.j2ee.deployment.devmodules.api.Deployment;
import org.netbeans.modules.j2ee.deployment.devmodules.spi.J2eeModuleProvider;
import org.openide.ErrorManager;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;

/**
 * A tool to prepare and deploy the Platypus web module.
 *
 * @author vv
 */
public class PlatypusWebModuleManager {

    public static final String PLATYPUS_SERVLET_URL_PATTERN = "/application/*"; //NOI18N
    public static final String WAR_FILE_NAME = "PlatypusServlet.war"; //NOI18N
    public static final String WEB_DESCRIPTOR_FILE_NAME = "web.xml"; //NOI18N
    public static final String START_PAGE_FILE_NAME = "applicationStart.html"; //NOI18N
    public static final String LOGIN_PAGE_FILE_NAME = "login.html"; //NOI18N
    public static final String LOGIN_FAIL_PAGE_FILE_NAME = "loginFail.html"; //NOI18N
    public static final String JS_DIRECTORY_NAME = "js"; //NOI18N
    public static final String START_JS_FILE_NAME = "start.js"; //NOI18N
    public static final String WEB_XML_FILE_NAME = "web.xml"; //NOI18N
    public static final String SERVLET_BEAN_NAME = "Servlet"; //NOI18N
    public static final String MULTIPART_CONFIG_BEAN_NAME = "MultipartConfig"; //NOI18N
    public static final String SERVLET_MAPPING_BEAN_NAME = "ServletMapping"; //NOI18N
    public static final String PLATYPUS_SERVLET_NAME = "PlatypusServlet"; //NOI18N
    public static final String PLATYPUS_SERVLET_CLASS = "com.eas.server.httpservlet.PlatypusHttpServlet";//NOI18N
    public static final String WEB_APP_LISTENER_CLASS = "com.eas.server.httpservlet.PlatypusSessionsSynchonizer";//NOI18N
    public static final String DATASOURCE_CLASS = "javax.sql.DataSource"; //NOI18N
    public static final String CONTAIER_RESOURCE_SECURITY_TYPE = "Container"; //NOI18N
    public static final long MULTIPART_MAX_FILE_SIZE = 2097152;
    public static final long MULTIPART_MAX_REQUEST_SIZE = 2165824;
    public static final long MULTIPART_MAX_FILE_THRESHOLD = 1048576;
    protected final String START_JS_FILE_TEMPLATE = "" //NOI18N
            + "/*\n"//NOI18N
            + "* Do not edit this file manualy, it will be overwritted by Platypus Application Designer.\n"//NOI18N
            + "*/\n"//NOI18N
            + "\n"//NOI18N
            + "require(['%s'], function(){\n"//NOI18N
            + "\tvar f = new %s()\n"//NOI18N
            + "\tf.show()\n"//NOI18N
            + "})";//NOI18N
    protected final PlatypusProject project;
    protected final FileObject projectDir;
    protected FileObject webAppDir;
    protected FileObject webInfDir;
    protected FileObject metaInfDir;
    protected FileObject publicDir;

    public PlatypusWebModuleManager(PlatypusProject aProject) {
        project = aProject;
        projectDir = aProject.getProjectDirectory();
    }

    /**
     * Runs the web application.
     *
     * @param isDebug true if debug mode to be activated
     * @return URL to open in browser
     *
     */
    public String run(String appElementId, boolean isDebug) {
        PlatypusWebModule webModule = project.getLookup().lookup(PlatypusWebModule.class);
        String webAppRunUrl = null;
        if (webModule != null) {
            if (webModule.getServerID() == null || webModule.getServerID().isEmpty()) {
                project.getOutputWindowIO().getOut().println("Application server is not set. Check J2EE Server settings at Project's properties.");
                return null;
            }
            if (webModule.getUrl() == null || webModule.getUrl().isEmpty()) {
                project.getOutputWindowIO().getOut().println("J2EE Server context is not configured for the project.");
                return null;
            }
            try {
                prepareWebApplication();
                setupWebApplication(webModule);
                setStartApplicationElement(appElementId);
                webAppRunUrl = Deployment.getDefault().deploy(webModule, Deployment.Mode.RUN, null, START_PAGE_FILE_NAME, false);
                String deployResultMessage = "Web application deployed.";
                Logger.getLogger(PlatypusWebModuleManager.class.getName()).log(Level.INFO, deployResultMessage);
                project.getOutputWindowIO().getOut().println(deployResultMessage);

            } catch (Exception ex) {
                ErrorManager.getDefault().notify(ex);
            }
        } else {
            throw new IllegalStateException("J2eeModuleProvider instance should be in the project's lookup.");
        }
        return webAppRunUrl;
    }

    /**
     * Creates an web application skeleton if not created yet.
     */
    protected void prepareWebApplication() throws IOException, EmptyPlatformHomePathException {
        webAppDir = createFolderIfNotExists(projectDir, PlatypusWebModule.WEB_DIRECTORY);
        FileObject platformBinDir = FileUtil.toFileObject(PlatypusPlatform.getPlatformBinDirectory());
        FileObject referenceWar = platformBinDir.getFileObject(WAR_FILE_NAME);
        if (referenceWar != null) {
            FileObject war = FileUtil.getArchiveRoot(referenceWar);
            if (war != null) {
                copyContent(war, webAppDir);
            } else {
                throw new ZipException("Error reading web application archive.");
            }
        } else {
            throw new FileNotFoundException("Web application archive is not found at: " + PlatypusPlatform.getPlatformBinDirectory());
        }
        webInfDir = createFolderIfNotExists(webAppDir, PlatypusWebModule.WEB_INF_DIRECTORY);
        metaInfDir = createFolderIfNotExists(webAppDir, PlatypusWebModule.META_INF_DIRECTORY);
        publicDir = createFolderIfNotExists(webAppDir, PlatypusWebModule.PUBLIC_DIRECTORY);
    }

    /**
     * Recursively copies web application structure from war archive. If
     * destination file exists it isn't overwritten.
     *
     * @throws IOException if some I/O problem occurred.
     */
    protected void copyContent(FileObject sourceDir, FileObject targetDir) throws IOException {
        assert sourceDir.isFolder() && targetDir.isFolder();
        FileObject targetFile;
        for (FileObject childFile : sourceDir.getChildren()) {
            if (childFile.isFolder()) {
                targetFile = targetDir.getFileObject(childFile.getName(), childFile.getExt());
                if (targetFile == null) {
                    targetFile = targetDir.createFolder(childFile.getNameExt());
                }
                assert targetFile.isFolder();
                copyContent(childFile, targetFile);
            } else {
                copyIfNotExists(targetDir, childFile);
            }
        }
    }

    private FileObject copyIfNotExists(FileObject dir, FileObject file) throws IOException {
        FileObject target = dir.getFileObject(file.getNameExt());
        if (target == null) {
            target = file.copy(dir, file.getName(), file.getExt());
        }
        return target;
    }

    private FileObject createFolderIfNotExists(FileObject dir, String name) throws IOException {
        FileObject fo = dir.getFileObject(name);
        if (fo == null) {
            fo = dir.createFolder(name);
        }
        return fo;
    }

    /**
     * Sets up an web application.
     *
     * @param aJmp Web Module
     */
    protected void setupWebApplication(J2eeModuleProvider aJmp) throws Exception {
        WebAppManager webAppConfigurator = WebAppManagerFactory.getInstance().createWebAppManager(project, aJmp);
        if (webAppConfigurator != null) {
            webAppConfigurator.deployJdbcDrivers();
            webAppConfigurator.configure();
        } else {
            String errorMessage = String.format("Web application configuration is not supported for application server: %s", aJmp.getServerID());
            Logger.getLogger(PlatypusWebModuleManager.class.getName()).log(Level.WARNING, errorMessage);
            project.getOutputWindowIO().getErr().println(errorMessage);
        }
        configureDeploymentDescriptor();
    }

    private void configureDeploymentDescriptor() throws Exception {
        WebApplication wa = new WebApplication();
        if (!project.getSettings().isDbAppSources()) {
            wa.addInitParam(new ContextParam(ClientConstants.APP_PATH_CMD_PROP_NAME1, project.getSrcRoot().getPath()));
        }
        wa.addInitParam(new ContextParam(ClientConstants.DB_CONNECTION_URL_PROP_NAME, PlatypusWebModule.MAIN_DATASOURCE_NAME));
        DbConnectionSettings dbSettings = project.getSettings().getAppSettings().getDbSettings();
        String dbConnectionSchema = dbSettings.getInfo().getProperty(ClientConstants.DB_CONNECTION_SCHEMA_PROP_NAME);
        if (dbConnectionSchema != null && !dbConnectionSchema.isEmpty()) {
            wa.addInitParam(new ContextParam(ClientConstants.DB_CONNECTION_SCHEMA_PROP_NAME, dbConnectionSchema));
        }
        String dialect = GeneralResourceProvider.constructPropertiesByDbConnectionSettings(dbSettings).getProperty(ClientConstants.DB_CONNECTION_DIALECT_PROP_NAME);
        wa.addInitParam(new ContextParam(ClientConstants.DB_CONNECTION_DIALECT_PROP_NAME, dialect));
        wa.addAppListener(new AppListener(WEB_APP_LISTENER_CLASS));
        Servlet platypusServlet = new Servlet(PLATYPUS_SERVLET_NAME, PLATYPUS_SERVLET_CLASS);
        MultipartConfig multiPartConfig = new MultipartConfig();
        multiPartConfig.setLocation(publicDir.getPath());
        multiPartConfig.setMaxFileSize(Long.toString(MULTIPART_MAX_FILE_SIZE));
        multiPartConfig.setMaxRequestSize(Long.toString(MULTIPART_MAX_REQUEST_SIZE));
        multiPartConfig.setFileSizeThreshold(Long.toString(MULTIPART_MAX_FILE_THRESHOLD));
        platypusServlet.setMultipartConfig(multiPartConfig);
        wa.addServlet(platypusServlet);
        wa.addServletMapping(new ServletMapping(PLATYPUS_SERVLET_NAME, PLATYPUS_SERVLET_URL_PATTERN));
        ResourceRef resourceRef = new ResourceRef(PlatypusWebModule.MAIN_DATASOURCE_NAME, DATASOURCE_CLASS, CONTAIER_RESOURCE_SECURITY_TYPE);
        resourceRef.setDescription("Main database connection"); //NOI18N
        wa.addResourceRef(resourceRef);
        FileObject webXml = webInfDir.getFileObject(WEB_XML_FILE_NAME);
        if (webXml == null) {
            webXml = webInfDir.createData(WEB_XML_FILE_NAME);
        }
        FileUtils.writeString(FileUtil.toFile(webXml), XmlDom2String.transform(wa.toDocument()), PlatypusUtils.COMMON_ENCODING_NAME);
    }

    protected void setStartApplicationElement(String appElementId) throws IOException {
        if (appElementId != null && !appElementId.isEmpty()) {
            FileObject jsDir = webAppDir.getFileObject(JS_DIRECTORY_NAME);
            FileObject startJs = jsDir.getFileObject(START_JS_FILE_NAME);
            if (startJs != null) {
                String starupScript = String.format(START_JS_FILE_TEMPLATE, appElementId, appElementId);
                FileUtils.writeString(FileUtil.toFile(startJs), starupScript, PlatypusUtils.COMMON_ENCODING_NAME);
            } else {
                throw new FileNotFoundException(START_JS_FILE_NAME + " file is not found in " + JS_DIRECTORY_NAME);
            }
        } else {
            throw new IllegalStateException("appElementId is null or empty.");
        }
    }
}
